import sqlite3
import random
import asyncio
import os
from datetime import datetime, timedelta, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# =================== –ù–ê–°–¢–†–û–ô–ö–ò ===================
TOKEN = "8228969867:AAEBrLBjaxnhZjiEBTCGuqKX3VeOAffAHV4"
GROUP_ID = -1003015346551
ADMIN_ID = 577104457
BOT_USERNAME = "@watereverydaybot"

MOTIVATION = [
    "üíß –í–æ–¥–∞ ‚Äî —ç—Ç–æ –∂–∏–∑–Ω—å! –ü–µ–π –∏ —Å–∏—è–π!",
    "üåü –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ï—â—ë —Å—Ç–∞–∫–∞–Ω ‚Äî –∏ —Ç—ã —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π!",
    "‚ú® –•–æ—Ä–æ—à–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è = –∫—Ä–∞—Å–∏–≤–∞—è –∫–æ–∂–∞!",
    "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
    "üí™ –ö–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ!",
    "üíß –§–∞–∫—Ç: –í–æ–¥–∞ —Å–∂–∏–≥–∞–µ—Ç 50 –∫–∫–∞–ª/–ª–∏—Ç—Ä!",
    "‚ú® –§–∞–∫—Ç: –ö–æ–∂–∞ —ç–ª–∞—Å—Ç–∏—á–Ω–µ–µ –Ω–∞ 30%!",
    "üß† –§–∞–∫—Ç: –ü–∞–º—è—Ç—å —É–ª—É—á—à–∞–µ—Ç—Å—è –Ω–∞ 20%!",
    "üí§ –§–∞–∫—Ç: –°–æ–Ω –ª—É—á—à–µ –Ω–∞ 15%!",
    "‚ù§Ô∏è –§–∞–∫—Ç: –°–µ—Ä–¥—Ü–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–µ–≥—á–µ!"
]

GENDER, AGE, WEIGHT, ACTIVITY, CLIMATE, PREGNANCY, CUSTOM_GOAL = range(7)

# =================== –ë–ê–ó–ê –î–ê–ù–ù–´–• (–ü–ï–†–ï–°–û–ó–î–ê–Å–¢–°–Ø!) ===================
def init_db():
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    
    # –£–î–ê–õ–Ø–ï–ú –°–¢–ê–†–£–Æ –ë–ê–ó–£ + –°–û–ó–î–ê–Å–ú –ù–û–í–£–Æ
    c.execute("DROP TABLE IF EXISTS users")
    c.execute("DROP TABLE IF EXISTS daily_stats")
    c.execute("DROP TABLE IF EXISTS marathon_history")
    c.execute("DROP TABLE IF EXISTS messages")
    
    # –ù–û–í–ê–Ø –ë–ê–ó–ê
    c.execute('''CREATE TABLE users (
        user_id INTEGER PRIMARY KEY,
        gender TEXT,
        age INTEGER,
        weight REAL,
        activity TEXT,
        climate TEXT,
        pregnancy TEXT,
        goal REAL DEFAULT 2.0,
        daily_intake REAL DEFAULT 0,
        streak INTEGER DEFAULT 0,
        last_date TEXT,
        subscribed INTEGER DEFAULT 1,
        group_member INTEGER DEFAULT 0,
        marathon_start TEXT,
        marathon_day INTEGER DEFAULT 1
    )''')
    
    c.execute('''CREATE TABLE daily_stats (
        user_id INTEGER,
        date TEXT,
        intake REAL,
        goal REAL,
        achieved INTEGER DEFAULT 0,
        PRIMARY KEY (user_id, date)
    )''')
    
    c.execute('''CREATE TABLE marathon_history (
        user_id INTEGER,
        start_date TEXT,
        end_date TEXT,
        total_streak INTEGER
    )''')
    
    c.execute('''CREATE TABLE messages (
        streak_day INTEGER PRIMARY KEY,
        message_text TEXT
    )''')
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    default_msgs = {
        3: "üéâ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥! –¢—ã –Ω–∞ –≤–æ–ª–Ω–µ! üí™",
        7: "üèÜ –ù–µ–¥–µ–ª—è —É—Å–ø–µ—Ö–∞! –ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! üì£",
        14: "üî• 2 –Ω–µ–¥–µ–ª–∏! –ö–æ–∂–∞ —Å–∏—è–µ—Ç! ‚ú®",
        21: "üåà 3 –Ω–µ–¥–µ–ª–∏! –ü—Ä–∏–≤—ã—á–∫–∞ –∑–∞–∫—Ä–µ–ø–∏–ª–∞—Å—å! üëè",
        30: "ü•≥ –ú–ê–†–ê–§–û–ù –ó–ê–í–Å–†–®–Å–ù! –¢—ã –∏–∑–º–µ–Ω–∏–ª –∂–∏–∑–Ω—å! üéâ"
    }
    for day, msg in default_msgs.items():
        c.execute("INSERT INTO messages VALUES (?, ?)", (day, msg))
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–ï–†–ï–°–û–ó–î–ê–ù–ê!")

def get_user(user_id):
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    if not result:
        conn = sqlite3.connect('water_bot.db')
        c = conn.cursor()
        c.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()
        return (user_id, None, None, None, None, None, None, 2.0, 0, 0, None, 1, 0, None, 1)
    return result

def update_user(user_id, **kwargs):
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    set_parts = ", ".join([f"{k}=?" for k in kwargs.keys()])
    query = f"UPDATE users SET {set_parts} WHERE user_id = ?"
    values = list(kwargs.values()) + [user_id]
    c.execute(query, values)
    conn.commit()
    conn.close()

def save_daily_stats(user_id, intake, goal):
    today = datetime.now().strftime('%Y-%m-%d')
    achieved = 1 if intake >= goal else 0
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO daily_stats VALUES (?, ?, ?, ?, ?)", 
              (user_id, today, intake, goal, achieved))
    conn.commit()
    conn.close()

def add_intake(user_id, amount):
    user = get_user(user_id)
    today = datetime.now().strftime('%Y-%m-%d')
    if user[10] == today:
        new_intake = user[8] + amount
    else:
        new_intake = amount
    update_user(user_id, daily_intake=new_intake, last_date=today)
    save_daily_stats(user_id, new_intake, user[7])
    return new_intake

def get_streak_message(streak_day):
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("SELECT message_text FROM messages WHERE streak_day = ?", (streak_day,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else f"üéâ –°—Ç—Ä–∏–∫ {streak_day} –¥–Ω–µ–π!"

def get_week_stats(user_id):
    today = datetime.now()
    week_ago = today - timedelta(days=7)
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("SELECT date, intake FROM daily_stats WHERE user_id = ? AND date >= ? ORDER BY date", 
              (user_id, week_ago.strftime('%Y-%m-%d')))
    stats = c.fetchall()
    conn.close()
    return stats

# =================== –†–ê–°–ß–Å–¢ –¶–ï–õ–ò ===================
def calculate_goal(gender, age, weight, activity, climate, pregnancy):
    if age < 1: return 0.8
    elif age <= 3: return 1.3
    elif age <= 8: return 1.7
    elif age <= 13: return 2.4 if gender == 'male' else 2.1
    elif age <= 18: return 3.3 if gender == 'male' else 2.3
    else:
        base = (weight * (35 if gender == 'male' else 30)) / 1000
        if age > 65: base *= 0.9
        if activity == '—Å—Ä–µ–¥–Ω—è—è': base += 0.5
        elif activity == '–≤—ã—Å–æ–∫–∞—è': base += 1.2
        if climate == '—É–º–µ—Ä–µ–Ω–Ω—ã–π': base += 0.2
        elif climate == '–∂–∞—Ä–∫–∏–π': base += 0.75
        if pregnancy == '–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å': base += 0.3
        elif pregnancy == '–∫–æ—Ä–º–ª–µ–Ω–∏–µ': base += 0.85
    return round(base, 1)

# =================== –ú–ï–ù–Æ ===================
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üíß –í—ã–ø–∏–ª –≤–æ–¥—É", callback_data="log_water")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton("üë• –ì—Ä—É–ø–ø–∞", url="https://t.me/+Ic9SbOrxNWQzNmIy")]
    ]
    return InlineKeyboardMarkup(keyboard)

# =================== –û–ü–†–û–° ===================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="male")],
        [InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="female")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üíß –ü—Ä–∏–≤–µ—Ç! –Ø @watereverydaybot\n\n–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=reply_markup)
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    update_user(query.from_user.id, gender=query.data)
    await query.edit_message_text("üìè –í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):")
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)
        update_user(update.effective_user.id, age=age)
        await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏ –≤–µ—Å (–∫–≥):")
        return WEIGHT
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –í–æ–∑—Ä–∞—Å—Ç:")
        return AGE

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        weight = float(update.message.text)
        update_user(update.effective_user.id, weight=weight)
        keyboard = [
            [InlineKeyboardButton("–ù–∏–∑–∫–∞—è (–æ—Ñ–∏—Å)", callback_data="–Ω–∏–∑–∫–∞—è")],
            [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è (—Ö–æ–¥—å–±–∞)", callback_data="—Å—Ä–µ–¥–Ω—è—è")],
            [InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è (—Å–ø–æ—Ä—Ç)", callback_data="–≤—ã—Å–æ–∫–∞—è")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üèÉ –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)
        return ACTIVITY
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –í–µ—Å (–∫–≥):")
        return WEIGHT

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    update_user(query.from_user.id, activity=query.data)
    keyboard = [
        [InlineKeyboardButton("–•–æ–ª–æ–¥–Ω—ã–π (<15¬∞)", callback_data="—Ö–æ–ª–æ–¥–Ω—ã–π")],
        [InlineKeyboardButton("–£–º–µ—Ä–µ–Ω–Ω—ã–π (15-25¬∞)", callback_data="—É–º–µ—Ä–µ–Ω–Ω—ã–π")],
        [InlineKeyboardButton("–ñ–∞—Ä–∫–∏–π (>25¬∞)", callback_data="–∂–∞—Ä–∫–∏–π")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üå°Ô∏è –ö–ª–∏–º–∞—Ç:", reply_markup=reply_markup)
    return CLIMATE

async def climate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    update_user(query.from_user.id, climate=query.data)
    user = get_user(query.from_user.id)
    if user[1] == 'female':
        keyboard = [
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="–Ω–µ—Ç")],
            [InlineKeyboardButton("–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", callback_data="–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å")],
            [InlineKeyboardButton("–ö–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="–∫–æ—Ä–º–ª–µ–Ω–∏–µ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("ü§∞ –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å/–∫–æ—Ä–º–ª–µ–Ω–∏–µ?", reply_markup=reply_markup)
        return PREGNANCY
    return await propose_goal(query, context)

async def pregnancy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    update_user(query.from_user.id, pregnancy=query.data)
    return await propose_goal(query, context)

async def propose_goal(update, context):
    user = get_user(update.callback_query.from_user.id)
    goal = calculate_goal(user[1], user[2], user[3], user[4], user[5], user[6])
    update_user(user[0], goal=goal)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_goal")],
        [InlineKeyboardButton("üìù –°–≤–æ—è —Ü–µ–ª—å", callback_data="custom_goal")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: **{goal} –ª/–¥–µ–Ω—å**\n\n–ü—Ä–∏–Ω—è—Ç—å?", reply_markup=reply_markup, parse_mode='Markdown')
    return CUSTOM_GOAL

async def accept_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ä–∞—Ñ–æ–Ω! üíß", reply_markup=get_main_menu())
    return ConversationHandler.END

async def custom_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìù –í–≤–µ–¥–∏ —Å–≤–æ—é —Ü–µ–ª—å –≤ –ª–∏—Ç—Ä–∞—Ö (2.5):")
    return CUSTOM_GOAL

async def set_custom_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        goal = float(update.message.text)
        update_user(update.effective_user.id, goal=goal)
        await update.message.reply_text(f"‚úÖ –¶–µ–ª—å: **{goal} –ª**! –ú–∞—Ä–∞—Ñ–æ–Ω –Ω–∞—á–∞—Ç! üíß", reply_markup=get_main_menu(), parse_mode='Markdown')
        return ConversationHandler.END
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)")
        return CUSTOM_GOAL

# =================== –ö–û–ú–ê–ù–î–´ ===================
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.effective_user.id)
    progress = min(int((user[8] / user[7]) * 10), 10)
    bar = "üîµ" * progress + "‚ö™" * (10 - progress)
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
    today = datetime.now()
    calendar_text = ""
    for i in range(5):
        date = today - timedelta(days=4-i)
        date_str = date.strftime('%d.%m')
        conn = sqlite3.connect('water_bot.db')
        c = conn.cursor()
        c.execute("SELECT intake FROM daily_stats WHERE user_id = ? AND date = ?", 
                  (user[0], date.strftime('%Y-%m-%d')))
        result = c.fetchone()
        conn.close()
        intake = result[0] if result else 0
        day_progress = min(int((intake / user[7]) * 6), 6)
        day_bar = "üîµ" * day_progress + "‚ö™" * (6 - day_progress)
        status = "‚úÖ" if intake >= user[7] else ""
        calendar_text += f"üíß {date_str}: {day_bar} {status}\n"
    
    text = f"""üìä **{BOT_USERNAME} ‚Äî –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üíß –°–µ–≥–æ–¥–Ω—è: {bar} (**{user[8]:.1f}/{user[7]:.1f} –ª**)
üìÖ –°—Ç—Ä–∏–∫: **{user[9]} –¥–Ω–µ–π**

**–ö–ê–õ–ï–ù–î–ê–†–¨ (5 –¥–Ω–µ–π):**
{calendar_text}

{random.choice(MOTIVATION)}"""
    
    await update.message.reply_text(text, reply_markup=get_main_menu(), parse_mode='Markdown')

async def log_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("200 –º–ª", callback_data="add_0.2"), InlineKeyboardButton("300 –º–ª", callback_data="add_0.3")],
        [InlineKeyboardButton("500 –º–ª", callback_data="add_0.5"), InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="custom_intake")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üíß –í—ã–ø–∏–ª –≤–æ–¥—É:", reply_markup=reply_markup)

async def reset_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime('%Y-%m-%d')
    update_user(update.effective_user.id, daily_intake=0, streak=0, last_date=today)
    await update.message.reply_text("‚úÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!** –ß–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç! üíß", reply_markup=get_main_menu(), parse_mode='Markdown')

async def new_marathon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime('%Y-%m-%d')
    update_user(update.effective_user.id, 
                daily_intake=0, streak=0, last_date=today, 
                marathon_start=today, marathon_day=1)
    await update.message.reply_text("üèÅ **30-–î–ù–ï–í–ù–´–ô –ú–ê–†–ê–§–û–ù –ù–ê–ß–ê–¢!**\n**–î–µ–Ω—å 1/30**", reply_markup=get_main_menu(), parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = f"""üìñ **{BOT_USERNAME} ‚Äî –ü–û–ú–û–©–¨**

/start ‚Äî –û–ø—Ä–æ—Å —Ü–µ–ª–∏
/log ‚Äî –í–≤–æ–¥ –≤–æ–¥—ã
/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/reset_stats ‚Äî –°–±—Ä–æ—Å  
/new_marathon ‚Äî –ù–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω
/unsubscribe ‚Äî –í—ã–∫–ª. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üë• –ì—Ä—É–ø–ø–∞: t.me/+Ic9SbOrxNWQzNmIy"""
    await update.message.reply_text(text, reply_markup=get_main_menu(), parse_mode='Markdown')

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user(update.effective_user.id, subscribed=0)
    await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã", reply_markup=get_main_menu())

# =================== –ö–ù–û–ü–ö–ò ===================
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user = get_user(user_id)
    
    if query.data == "log_water":
        keyboard = [
            [InlineKeyboardButton("200 –º–ª", callback_data="add_0.2"), InlineKeyboardButton("300 –º–ª", callback_data="add_0.3")],
            [InlineKeyboardButton("500 –º–ª", callback_data="add_0.5"), InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="custom_intake")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("üíß –í—ã–±–µ—Ä–∏ –æ–±—ä—ë–º:", reply_markup=reply_markup)
    elif query.data.startswith("add_"):
        amount = float(query.data.split("_")[1])
        new_intake = add_intake(user_id, amount)
        progress = min(int((new_intake / user[7]) * 100), 100)
        if new_intake >= user[7]:
            await query.edit_message_text(f"üéâ **–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!** {progress}% üåü", reply_markup=get_main_menu(), parse_mode='Markdown')
        else:
            await query.edit_message_text(f"‚úÖ **+{amount*1000} –º–ª** | **{progress}%**", reply_markup=get_main_menu(), parse_mode='Markdown')
    elif query.data == "show_stats":
        await stats(query.message, context)
    elif query.data == "accept_goal":
        await accept_goal(update, context)
    elif query.data == "custom_goal":
        await custom_goal(update, context)
    elif query.data == "custom_intake":
        await query.message.reply_text("üìù –í–≤–µ–¥–∏ –æ–±—ä—ë–º –≤ –º–ª (250):")

async def handle_custom_intake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text) / 1000
        new_intake = add_intake(update.effective_user.id, amount)
        user = get_user(update.effective_user.id)
        progress = min(int((new_intake / user[7]) * 100), 100)
        await update.message.reply_text(f"‚úÖ **+{update.message.text} –º–ª** | **{progress}%**", reply_markup=get_main_menu(), parse_mode='Markdown')
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –º–ª (250)")

# =================== –ê–î–ú–ò–ù ===================
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID: return
    if not context.args: 
        await update.message.reply_text("üì§ /broadcast –¢–ï–ö–°–¢")
        return
    message = " ".join(context.args)
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE subscribed = 1")
    users = [row[0] for row in c.fetchall()]
    conn.close()
    success = 0
    for user_id in users:
        try:
            await context.bot.send_message(user_id, f"üíß @{BOT_USERNAME}\n\n{message}")
            success += 1
        except: continue
    await context.bot.send_message(GROUP_ID, f"üíß @{BOT_USERNAME}\n\n{message}")
    await update.message.reply_text(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞: **{success}/{len(users)}**")

# =================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===================
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE subscribed = 1")
    users = [row[0] for row in c.fetchall()]
    conn.close()
    for user_id in users:
        try:
            keyboard = [
                [InlineKeyboardButton("200 –º–ª", callback_data="add_0.2"), InlineKeyboardButton("300 –º–ª", callback_data="add_0.3")],
                [InlineKeyboardButton("500 –º–ª", callback_data="add_0.5")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                user_id, 
                f"üíß @{BOT_USERNAME}\n\n**–í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É!**\n{random.choice(MOTIVATION)}",
                reply_markup=reply_markup, parse_mode='Markdown'
            )
        except: continue

async def daily_reset(context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('water_bot.db')
    c = conn.cursor()
    c.execute("SELECT user_id, daily_intake, goal, streak FROM users")
    users = c.fetchall()
    today = datetime.now().strftime('%Y-%m-%d')
    for user_id, intake, goal, streak in users:
        save_daily_stats(user_id, intake, goal)
        if intake >= goal:
            streak += 1
        else:
            streak = 0
        c.execute("UPDATE users SET daily_intake=0, streak=?, last_date=? WHERE user_id=?", 
                 (streak, today, user_id))
    conn.commit()
    conn.close()

# =================== –ó–ê–ü–£–°–ö ===================
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER: [CallbackQueryHandler(gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            ACTIVITY: [CallbackQueryHandler(activity)],
            CLIMATE: [CallbackQueryHandler(climate)],
            PREGNANCY: [CallbackQueryHandler(pregnancy)],
            CUSTOM_GOAL: [
                CallbackQueryHandler(button_callback, pattern="^(accept_goal|custom_goal)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_custom_goal)
            ]
        },
        fallbacks=[],
        per_message=False
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("log", log_water))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("reset_stats", reset_stats))
    app.add_handler(CommandHandler("new_marathon", new_marathon))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_intake))
    
    app.job_queue.run_repeating(send_reminder, interval=7200, first=60)
    app.job_queue.run_daily(daily_reset, time=time(0, 0))
    
    print("ü§ñ @watereverydaybot –ó–ê–ü–£–©–ï–ù! ‚úÖ 20 –§–ò–ß!")
    app.run_polling()

if __name__ == '__main__':
    main()